<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Solicitud de Servicio de Templado</title>
    <!-- Incluye Tailwind CSS desde CDN para un estilo moderno -->
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        /* Estilo para la fuente Inter, ampliamente utilizada y legible */
        body {
            font-family: 'Inter', sans-serif;
            /* Fondo con imagen de puerta de vidrio y agua */
            background-image: url('https://images.unsplash.com/photo-1549449000-88849b2c3a50?ixlib=rb-1.2.1&auto=format&fit=crop&w=1950&q=80');
            background-size: cover;
            background-position: center;
            background-attachment: fixed;
            background-color: #f0fdf4; /* Un color de respaldo por si la imagen no carga */
        }
        /* Oculta los botones de flecha en los inputs de tipo number */
        input[type=number]::-webkit-inner-spin-button, 
        input[type=number]::-webkit-outer-spin-button { 
            -webkit-appearance: none;
            margin: 0;
        }
        input[type=number] {
            -moz-appearance: textfield;
        }
        /* Estilos para el modal */
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 1000;
        }
        .modal-content {
            background: white;
            padding: 2rem;
            border-radius: 0.5rem;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            max-width: 90%;
            width: 400px;
        }
    </style>
</head>
<body class="p-4 md:p-8 flex items-center justify-center">

    <!-- Contenedor principal con fondo semitransparente -->
    <div class="max-w-4xl w-full bg-white bg-opacity-90 p-6 md:p-10 rounded-xl shadow-2xl border border-gray-100 backdrop-blur-sm">
        
        <!-- Logo de la empresa -->
        <div class="flex justify-center mb-6">
            <img src="http://googleusercontent.com/file_content/1" alt="Logo de Sunglass MG C.A." class="h-12 w-auto rounded-md shadow-inner border border-green-200">
        </div>
        
        <h1 class="text-3xl font-extrabold mb-8 text-center text-green-800">Solicitud de Servicio de Templado</h1>
        
        <form id="pedidoForm" onsubmit="handleFormSubmit(event)">

            <!-- Sección 1: Datos del cliente -->
            <div class="mb-8">
                <h2 class="text-2xl font-bold mb-4 text-green-700 border-b-2 pb-2 border-green-200">1. Datos del Cliente</h2>
                <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                    <div>
                        <label for="nombre" class="block text-sm font-medium text-gray-700 mb-1">Nombre Completo</label>
                        <input type="text" id="nombre" name="nombre" class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-green-500 focus:border-green-500 transition duration-150 ease-in-out" required>
                    </div>
                    <div>
                        <label for="telefono" class="block text-sm font-medium text-gray-700 mb-1">Número Telefónico</label>
                        <input type="tel" id="telefono" name="telefono" class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-green-500 focus:border-green-500 transition duration-150 ease-in-out" required>
                    </div>
                    <div>
                        <label for="email" class="block text-sm font-medium text-gray-700 mb-1">Correo Electrónico</label>
                        <input type="email" id="email" name="email" class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-green-500 focus:border-green-500 transition duration-150 ease-in-out">
                    </div>
                </div>
            </div>

            <!-- Sección 2: Detalle del pedido -->
            <div class="mb-8">
                <h2 class="text-2xl font-bold mb-4 text-green-700 border-b-2 pb-2 border-green-200">2. Detalle del Pedido</h2>
                <div class="overflow-x-auto">
                    <table class="min-w-full divide-y divide-gray-300 rounded-lg overflow-hidden shadow-sm">
                        <thead class="bg-gray-50">
                            <tr>
                                <th scope="col" class="py-3.5 px-4 text-left text-sm font-semibold text-gray-900">Nro</th>
                                <th scope="col" class="py-3.5 px-4 text-left text-sm font-semibold text-gray-900">Espesor</th>
                                <th scope="col" class="py-3.5 px-4 text-left text-sm font-semibold text-gray-900">Largo (m)</th>
                                <th scope="col" class="py-3.5 px-4 text-left text-sm font-semibold text-gray-900">Ancho (m)</th>
                                <th scope="col" class="py-3.5 px-4 text-left text-sm font-semibold text-gray-900">Cantidad</th>
                                <th scope="col" class="py-3.5 px-4 text-left text-sm font-semibold text-gray-900">Total m²</th>
                                <th scope="col" class="relative py-3.5 px-4">
                                    <span class="sr-only">Eliminar</span>
                                </th>
                            </tr>
                        </thead>
                        <tbody id="pedidoItems" class="bg-white divide-y divide-gray-200">
                            <!-- Los items del pedido se agregarán aquí dinámicamente -->
                        </tbody>
                    </table>
                </div>
                <div class="mt-4 flex justify-end">
                    <button type="button" id="addItemBtn" class="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 transition duration-150 ease-in-out">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clip-rule="evenodd" />
                        </svg>
                        Agregar línea
                    </button>
                </div>
            </div>

            <!-- Sección 3: Resumen del pedido -->
            <div class="mb-8">
                <h2 class="text-2xl font-bold mb-4 text-green-700 border-b-2 pb-2 border-green-200">3. Resumen del Pedido</h2>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6 text-gray-600">
                    <div class="bg-gray-50 p-4 rounded-md shadow-sm">
                        <p class="text-sm font-medium">Cantidad total de vidrios:</p>
                        <p id="totalItems" class="text-2xl font-extrabold text-green-600 mt-1">0</p>
                    </div>
                    <div class="bg-gray-50 p-4 rounded-md shadow-sm">
                        <p class="text-sm font-medium">Cantidad de metros cuadrados totales:</p>
                        <p id="totalM2" class="text-2xl font-extrabold text-green-600 mt-1">0.00</p>
                    </div>
                    <div class="col-span-full">
                        <p class="text-lg font-medium text-gray-700 mt-4 mb-2">Total m² discriminados por espesor:</p>
                        <div class="grid grid-cols-1 sm:grid-cols-3 gap-4">
                            <div class="bg-gray-50 p-4 rounded-md shadow-sm">
                                <p class="text-sm font-medium">6mm:</p>
                                <p id="totalM2_6mm" class="text-xl font-bold text-gray-800 mt-1">0.00</p>
                            </div>
                            <div class="bg-gray-50 p-4 rounded-md shadow-sm">
                                <p class="text-sm font-medium">8mm:</p>
                                <p id="totalM2_8mm" class="text-xl font-bold text-gray-800 mt-1">0.00</p>
                            </div>
                            <div class="bg-gray-50 p-4 rounded-md shadow-sm">
                                <p class="text-sm font-medium">10mm:</p>
                                <p id="totalM2_10mm" class="text-xl font-bold text-gray-800 mt-1">0.00</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Botón de envío -->
            <div class="mt-8 pt-4 border-t-2 flex justify-center border-green-200">
                <button type="submit" class="w-full md:w-auto px-8 py-3 text-lg font-semibold text-white bg-green-600 rounded-full shadow-lg hover:bg-green-700 transition transform duration-150 ease-in-out hover:scale-105 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500">
                    Enviar Pedido
                </button>
            </div>
        </form>

    </div>
    
    <!-- Modal para la confirmación de email -->
    <div id="emailConfirmationModal" class="modal-overlay hidden">
        <div class="modal-content">
            <h3 class="text-xl font-bold mb-4">¡Pedido Enviado!</h3>
            <p class="mb-4">Se ha descargado un archivo de texto con los detalles del pedido.</p>
            <p class="mb-6 font-semibold text-sm text-gray-700">¿Deseas abrir tu aplicación de correo para enviar la solicitud? Recuerda adjuntar el archivo que acabas de descargar.</p>
            <div class="flex justify-end space-x-4">
                <button id="cancelEmailBtn" class="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-100 transition duration-150 ease-in-out">Cancelar</button>
                <button id="sendEmailBtn" class="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 transition duration-150 ease-in-out">Abrir Correo</button>
            </div>
        </div>
    </div>

<script>
    // Selecciona el contenedor de los ítems y el botón para agregar
    const pedidoItemsContainer = document.getElementById('pedidoItems');
    const addItemBtn = document.getElementById('addItemBtn');
    const emailConfirmationModal = document.getElementById('emailConfirmationModal');
    const sendEmailBtn = document.getElementById('sendEmailBtn');
    const cancelEmailBtn = document.getElementById('cancelEmailBtn');

    // Inicializa el contador para los números correlativos
    let itemCounter = 0;

    /**
     * Agrega una nueva fila al formulario para un nuevo ítem del pedido.
     */
    function addNewItemRow() {
        itemCounter++;

        // Crea una nueva fila (tr)
        const newRow = document.createElement('tr');
        newRow.className = "hover:bg-gray-100 transition duration-150 ease-in-out";
        newRow.innerHTML = `
            <td class="whitespace-nowrap py-4 px-4 text-sm font-medium text-gray-900">${itemCounter}</td>
            <td class="py-4 px-4 whitespace-nowrap text-sm text-gray-500">
                <select name="espesor_${itemCounter}" class="w-full border-gray-300 rounded-md shadow-sm focus:ring-green-500 focus:border-green-500">
                    <option value="6">6mm</option>
                    <option value="8">8mm</option>
                    <option value="10">10mm</option>
                </select>
            </td>
            <td class="py-4 px-4 whitespace-nowrap text-sm text-gray-500">
                <input type="number" step="0.01" min="0" name="largo_${itemCounter}" class="largoInput w-full border-gray-300 rounded-md shadow-sm focus:ring-green-500 focus:border-green-500" placeholder="0.00" required>
            </td>
            <td class="py-4 px-4 whitespace-nowrap text-sm text-gray-500">
                <input type="number" step="0.01" min="0" name="ancho_${itemCounter}" class="anchoInput w-full border-gray-300 rounded-md shadow-sm focus:ring-green-500 focus:border-green-500" placeholder="0.00" required>
            </td>
            <td class="py-4 px-4 whitespace-nowrap text-sm text-gray-500">
                <input type="number" step="1" min="1" name="cantidad_${itemCounter}" class="cantidadInput w-full border-gray-300 rounded-md shadow-sm focus:ring-green-500 focus:border-green-500" value="1" required>
            </td>
            <td class="py-4 px-4 whitespace-nowrap text-sm text-gray-500">
                <input type="text" name="totalM2_${itemCounter}" class="totalM2Input w-full border-gray-300 bg-gray-100 rounded-md shadow-sm text-gray-700" value="0.00" readonly>
            </td>
            <td class="py-4 px-4 whitespace-nowrap text-right text-sm font-medium">
                <button type="button" class="deleteItemBtn text-red-600 hover:text-red-900 transition duration-150 ease-in-out">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd" />
                    </svg>
                </button>
            </td>
        `;

        // Agrega la fila al contenedor
        pedidoItemsContainer.appendChild(newRow);
        
        // Agrega event listeners a los nuevos campos de Largo, Ancho y Cantidad
        const largoInput = newRow.querySelector('.largoInput');
        const anchoInput = newRow.querySelector('.anchoInput');
        const cantidadInput = newRow.querySelector('.cantidadInput');
        const espesorSelect = newRow.querySelector('select');
        
        largoInput.addEventListener('input', updateRowAndSummary);
        anchoInput.addEventListener('input', updateRowAndSummary);
        cantidadInput.addEventListener('input', updateRowAndSummary);
        espesorSelect.addEventListener('change', updateSummary);

        // Agrega event listener al nuevo botón de eliminar
        newRow.querySelector('.deleteItemBtn').addEventListener('click', () => {
            newRow.remove();
            updateCorrelativeNumbers();
            updateSummary();
        });

        // Asegura que los números correlativos se actualicen
        updateCorrelativeNumbers();

        // Actualiza el resumen inicial
        updateSummary();
    }

    /**
     * Actualiza el cálculo de metros cuadrados para una fila y el resumen general.
     * @param {Event} event - El evento que disparó la función (cambio en largo, ancho o cantidad).
     */
    function updateRowAndSummary(event) {
        const row = event.target.closest('tr');
        const largo = parseFloat(row.querySelector('.largoInput').value) || 0;
        const ancho = parseFloat(row.querySelector('.anchoInput').value) || 0;
        const cantidad = parseInt(row.querySelector('.cantidadInput').value) || 0;
        const totalM2Input = row.querySelector('.totalM2Input');

        // Calcula el total de m² con la nueva fórmula
        const totalM2 = (cantidad * largo * ancho).toFixed(2);
        totalM2Input.value = totalM2;

        // Llama a la función para actualizar el resumen
        updateSummary();
    }

    /**
     * Recalcula y actualiza todos los totales en la sección de resumen.
     */
    function updateSummary() {
        try {
            const allRows = document.querySelectorAll('#pedidoItems tr');
            let totalItems = 0;
            let totalM2Global = 0;
            const totalM2ByThickness = { '6': 0, '8': 0, '10': 0 };

            allRows.forEach(row => {
                // Suma la cantidad de piezas de cada fila
                const cantidad = parseInt(row.querySelector('.cantidadInput').value) || 0;
                totalItems += cantidad;
                
                const totalM2Value = parseFloat(row.querySelector('.totalM2Input').value) || 0;
                const thickness = row.querySelector('select').value;
                
                totalM2Global += totalM2Value;
                totalM2ByThickness[thickness] += totalM2Value;
            });

            // Actualiza los elementos HTML del resumen
            document.getElementById('totalItems').textContent = totalItems;
            document.getElementById('totalM2').textContent = totalM2Global.toFixed(2);
            document.getElementById('totalM2_6mm').textContent = totalM2ByThickness['6'].toFixed(2);
            document.getElementById('totalM2_8mm').textContent = totalM2ByThickness['8'].toFixed(2);
            document.getElementById('totalM2_10mm').textContent = totalM2ByThickness['10'].toFixed(2);
        } catch (error) {
            console.error("Error al actualizar el resumen del pedido:", error);
        }
    }

    /**
     * Actualiza los números correlativos de las filas después de una eliminación.
     */
    function updateCorrelativeNumbers() {
        const rows = document.querySelectorAll('#pedidoItems tr');
        rows.forEach((row, index) => {
            const correlativeCell = row.querySelector('td');
            if (correlativeCell) {
                correlativeCell.textContent = index + 1;
            }
        });
        itemCounter = rows.length;
    }

    /**
     * Genera un archivo de texto con los datos del pedido y lo descarga.
     * @param {object} data - Los datos del formulario.
     */
    function generateAndDownloadTextFile(data) {
        // Formatea la fecha actual
        const now = new Date();
        const dateString = `${now.getDate().toString().padStart(2, '0')}-${(now.getMonth() + 1).toString().padStart(2, '0')}-${now.getFullYear()} ${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}`;

        // Construye el contenido del archivo de texto
        let textContent = `--- Solicitud de Servicio de Templado ---\n`;
        textContent += `Fecha: ${dateString}\n\n`;

        // Datos del cliente
        textContent += `1. DATOS DEL CLIENTE\n`;
        textContent += `Nombre: ${data.nombre || 'No proporcionado'}\n`;
        textContent += `Teléfono: ${data.telefono || 'No proporcionado'}\n`;
        textContent += `Email: ${data.email || 'No proporcionado'}\n\n`;

        // Detalle del pedido
        textContent += `2. DETALLE DEL PEDIDO\n`;
        data.items.forEach(item => {
            textContent += `  - Nro: ${item.numero}, Espesor: ${item.espesor}mm, Largo: ${item.largo}m, Ancho: ${item.ancho}m, Cantidad: ${item.cantidad}, Total m²: ${item.totalM2}\n`;
        });
        textContent += `\n`;

        // Resumen del pedido
        textContent += `3. RESUMEN DEL PEDIDO\n`;
        textContent += `Cantidad total de vidrios: ${data.resumen.totalVidrios}\n`;
        textContent += `Cantidad total de metros cuadrados: ${data.resumen.totalM2}\n`;
        textContent += `Total m² por espesor:\n`;
        textContent += `  - 6mm: ${data.resumen.totalM2PorEspesor['6mm']}\n`;
        textContent += `  - 8mm: ${data.resumen.totalM2PorEspesor['8mm']}\n`;
        textContent += `  - 10mm: ${data.resumen.totalM2PorEspesor['10mm']}\n`;

        // Crea un Blob con el contenido del archivo
        const blob = new Blob([textContent], { type: 'text/plain' });
        
        // Crea un enlace temporal para la descarga
        const a = document.createElement('a');
        a.href = URL.createObjectURL(blob);
        a.download = `Pedido-${data.nombre.replace(/\s/g, '-') || 'cliente'}.txt`;
        
        // Simula un clic en el enlace para iniciar la descarga
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);

        // Retorna el nombre del archivo para su uso posterior
        return a.download;
    }


    /**
     * Maneja el envío del formulario.
     * @param {Event} event - El evento de envío del formulario.
     */
    function handleFormSubmit(event) {
        // Previene el envío del formulario para evitar la recarga de la página
        event.preventDefault();

        // Recolecta todos los datos del formulario en un objeto
        const formData = new FormData(event.target);
        const pedidoData = {};
        formData.forEach((value, key) => {
            pedidoData[key] = value;
        });

        // Agrega los detalles del pedido
        const allRows = document.querySelectorAll('#pedidoItems tr');
        pedidoData.items = [];
        allRows.forEach((row, index) => {
            const item = {
                numero: index + 1,
                espesor: row.querySelector('select').value,
                largo: parseFloat(row.querySelector('.largoInput').value) || 0,
                ancho: parseFloat(row.querySelector('.anchoInput').value) || 0,
                cantidad: parseInt(row.querySelector('.cantidadInput').value) || 0,
                totalM2: parseFloat(row.querySelector('.totalM2Input').value) || 0
            };
            pedidoData.items.push(item);
        });

        // Agrega los totales del resumen
        pedidoData.resumen = {
            totalVidrios: parseInt(document.getElementById('totalItems').textContent),
            totalM2: parseFloat(document.getElementById('totalM2').textContent),
            totalM2PorEspesor: {
                '6mm': parseFloat(document.getElementById('totalM2_6mm').textContent),
                '8mm': parseFloat(document.getElementById('totalM2_8mm').textContent),
                '10mm': parseFloat(document.getElementById('totalM2_10mm').textContent)
            }
        };

        // Genera y descarga el archivo de texto
        generateAndDownloadTextFile(pedidoData);

        // Muestra el modal de confirmación
        emailConfirmationModal.classList.remove('hidden');

        // Configura el botón de 'Abrir Correo' para el cliente actual
        sendEmailBtn.onclick = () => {
            const recipient = "sunglassmgca@gmail.com";
            const subject = encodeURIComponent(`Nuevo Pedido - ${pedidoData.nombre || 'Cliente'}`);
            const body = encodeURIComponent("Adjunto nueva solicitud de servicio.");
            window.location.href = `mailto:${recipient}?subject=${subject}&body=${body}`;
            emailConfirmationModal.classList.add('hidden');
        };

        // Configura el botón de 'Cancelar'
        cancelEmailBtn.onclick = () => {
            emailConfirmationModal.classList.add('hidden');
        };
    }

    // Inicializa el formulario agregando la primera fila al cargar la página
    document.addEventListener('DOMContentLoaded', () => {
        addNewItemRow();
    });

    // Agrega el evento para el botón "Agregar línea"
    addItemBtn.addEventListener('click', addNewItemRow);

</script>
</body>
</html>
